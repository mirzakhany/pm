// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/cycles/proto/cycles.proto

package cycles

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	proto1 "github.com/mirzakhany/pm/services/users/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ListCyclesRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCyclesRequest) Reset()      { *m = ListCyclesRequest{} }
func (*ListCyclesRequest) ProtoMessage() {}
func (*ListCyclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{0}
}
func (m *ListCyclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCyclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCyclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCyclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCyclesRequest.Merge(m, src)
}
func (m *ListCyclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCyclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCyclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCyclesRequest proto.InternalMessageInfo

func (m *ListCyclesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCyclesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListCyclesResponse struct {
	Cycles               []*Cycle `protobuf:"bytes,1,rep,name=cycles,proto3" json:"cycles"`
	TotalCount           int64    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListCyclesResponse) Reset()      { *m = ListCyclesResponse{} }
func (*ListCyclesResponse) ProtoMessage() {}
func (*ListCyclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{1}
}
func (m *ListCyclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCyclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCyclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCyclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCyclesResponse.Merge(m, src)
}
func (m *ListCyclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCyclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCyclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCyclesResponse proto.InternalMessageInfo

func (m *ListCyclesResponse) GetCycles() []*Cycle {
	if m != nil {
		return m.Cycles
	}
	return nil
}

func (m *ListCyclesResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListCyclesResponse) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListCyclesResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetCycleRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetCycleRequest) Reset()      { *m = GetCycleRequest{} }
func (*GetCycleRequest) ProtoMessage() {}
func (*GetCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{2}
}
func (m *GetCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCycleRequest.Merge(m, src)
}
func (m *GetCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCycleRequest proto.InternalMessageInfo

func (m *GetCycleRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type CreateCycleRequest struct {
	Title                string     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Active               bool       `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty"`
	Description          string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartAt              *time.Time `protobuf:"bytes,4,opt,name=start_at,json=startAt,proto3,stdtime" json:"start_at,omitempty"`
	EndAt                *time.Time `protobuf:"bytes,5,opt,name=end_at,json=endAt,proto3,stdtime" json:"end_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateCycleRequest) Reset()      { *m = CreateCycleRequest{} }
func (*CreateCycleRequest) ProtoMessage() {}
func (*CreateCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{3}
}
func (m *CreateCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCycleRequest.Merge(m, src)
}
func (m *CreateCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCycleRequest proto.InternalMessageInfo

func (m *CreateCycleRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateCycleRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *CreateCycleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateCycleRequest) GetStartAt() *time.Time {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *CreateCycleRequest) GetEndAt() *time.Time {
	if m != nil {
		return m.EndAt
	}
	return nil
}

type UpdateCycleRequest struct {
	Uuid                 string     `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title                string     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Active               bool       `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	Description          string     `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	StartAt              *time.Time `protobuf:"bytes,5,opt,name=start_at,json=startAt,proto3,stdtime" json:"start_at,omitempty"`
	EndAt                *time.Time `protobuf:"bytes,6,opt,name=end_at,json=endAt,proto3,stdtime" json:"end_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UpdateCycleRequest) Reset()      { *m = UpdateCycleRequest{} }
func (*UpdateCycleRequest) ProtoMessage() {}
func (*UpdateCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{4}
}
func (m *UpdateCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateCycleRequest.Merge(m, src)
}
func (m *UpdateCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateCycleRequest proto.InternalMessageInfo

func (m *UpdateCycleRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UpdateCycleRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateCycleRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *UpdateCycleRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateCycleRequest) GetStartAt() *time.Time {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *UpdateCycleRequest) GetEndAt() *time.Time {
	if m != nil {
		return m.EndAt
	}
	return nil
}

type DeleteCycleRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteCycleRequest) Reset()      { *m = DeleteCycleRequest{} }
func (*DeleteCycleRequest) ProtoMessage() {}
func (*DeleteCycleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{5}
}
func (m *DeleteCycleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteCycleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteCycleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteCycleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteCycleRequest.Merge(m, src)
}
func (m *DeleteCycleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteCycleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteCycleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteCycleRequest proto.InternalMessageInfo

func (m *DeleteCycleRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Cycle struct {
	Id                   uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                 string       `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title                string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Active               bool         `protobuf:"varint,4,opt,name=active,proto3" json:"active,omitempty"`
	Description          string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Creator              *proto1.User `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	StartAt              *time.Time   `protobuf:"bytes,7,opt,name=start_at,json=startAt,proto3,stdtime" json:"start_at,omitempty"`
	EndAt                *time.Time   `protobuf:"bytes,8,opt,name=end_at,json=endAt,proto3,stdtime" json:"end_at,omitempty"`
	CreatedAt            *time.Time   `protobuf:"bytes,9,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt            *time.Time   `protobuf:"bytes,10,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Cycle) Reset()      { *m = Cycle{} }
func (*Cycle) ProtoMessage() {}
func (*Cycle) Descriptor() ([]byte, []int) {
	return fileDescriptor_1c094b376e68e3a3, []int{6}
}
func (m *Cycle) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cycle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cycle.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cycle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cycle.Merge(m, src)
}
func (m *Cycle) XXX_Size() int {
	return m.Size()
}
func (m *Cycle) XXX_DiscardUnknown() {
	xxx_messageInfo_Cycle.DiscardUnknown(m)
}

var xxx_messageInfo_Cycle proto.InternalMessageInfo

func (m *Cycle) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cycle) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Cycle) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Cycle) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *Cycle) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Cycle) GetCreator() *proto1.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Cycle) GetStartAt() *time.Time {
	if m != nil {
		return m.StartAt
	}
	return nil
}

func (m *Cycle) GetEndAt() *time.Time {
	if m != nil {
		return m.EndAt
	}
	return nil
}

func (m *Cycle) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Cycle) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*ListCyclesRequest)(nil), "cycles.ListCyclesRequest")
	proto.RegisterType((*ListCyclesResponse)(nil), "cycles.ListCyclesResponse")
	proto.RegisterType((*GetCycleRequest)(nil), "cycles.GetCycleRequest")
	proto.RegisterType((*CreateCycleRequest)(nil), "cycles.CreateCycleRequest")
	proto.RegisterType((*UpdateCycleRequest)(nil), "cycles.UpdateCycleRequest")
	proto.RegisterType((*DeleteCycleRequest)(nil), "cycles.DeleteCycleRequest")
	proto.RegisterType((*Cycle)(nil), "cycles.Cycle")
}

func init() {
	proto.RegisterFile("services/cycles/proto/cycles.proto", fileDescriptor_1c094b376e68e3a3)
}

var fileDescriptor_1c094b376e68e3a3 = []byte{
	// 737 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x4f, 0x6b, 0xd4, 0x5a,
	0x14, 0x7f, 0x77, 0xfe, 0x75, 0xe6, 0xa4, 0xef, 0x95, 0xde, 0xd7, 0xd7, 0xd7, 0xc6, 0x92, 0x19,
	0x02, 0x85, 0x52, 0x30, 0xb1, 0x55, 0x10, 0x74, 0x21, 0x33, 0x55, 0xdc, 0x28, 0x42, 0xb4, 0x0a,
	0x22, 0x94, 0x34, 0xb9, 0x1d, 0x03, 0x99, 0xdc, 0x98, 0xdc, 0x14, 0x8a, 0x08, 0xe2, 0x27, 0x10,
	0xdc, 0xf9, 0x05, 0xf4, 0x23, 0xb8, 0x11, 0x5c, 0xba, 0x14, 0xdc, 0x88, 0x8b, 0xda, 0x09, 0xae,
	0xba, 0x10, 0x97, 0x2e, 0x25, 0x37, 0x37, 0x4d, 0x66, 0x32, 0xd4, 0xb6, 0xab, 0xdc, 0x73, 0xcf,
	0x39, 0xbf, 0xfb, 0x3b, 0xe7, 0xdc, 0xfb, 0x0b, 0xa8, 0x21, 0x09, 0x76, 0x1d, 0x8b, 0x84, 0xba,
	0xb5, 0x67, 0xb9, 0x24, 0xd4, 0xfd, 0x80, 0x32, 0x2a, 0x0c, 0x8d, 0x1b, 0xb8, 0x91, 0x5a, 0xf2,
	0x52, 0x9f, 0xd2, 0xbe, 0x4b, 0x74, 0xd3, 0x77, 0x74, 0xd3, 0xf3, 0x28, 0x33, 0x99, 0x43, 0x3d,
	0x11, 0x25, 0x9f, 0x13, 0x5e, 0x6e, 0x6d, 0x47, 0x3b, 0x3a, 0x19, 0xf8, 0x6c, 0x4f, 0x38, 0xdb,
	0xe3, 0x4e, 0xe6, 0x0c, 0x48, 0xc8, 0xcc, 0x81, 0x2f, 0x02, 0xce, 0xf7, 0x1d, 0xf6, 0x38, 0xda,
	0xd6, 0x2c, 0x3a, 0xd0, 0xfb, 0xb4, 0x4f, 0xf3, 0xc8, 0xc4, 0x4a, 0x49, 0x25, 0x2b, 0x11, 0xde,
	0x39, 0xa2, 0x1d, 0x85, 0x24, 0xc8, 0x58, 0x0f, 0xa8, 0x4d, 0xdc, 0x34, 0x42, 0xed, 0xc2, 0xec,
	0x2d, 0x27, 0x64, 0x1b, 0x9c, 0xba, 0x41, 0x9e, 0x44, 0x24, 0x64, 0x78, 0x0e, 0xea, 0xae, 0x33,
	0x70, 0xd8, 0x02, 0xea, 0xa0, 0x95, 0xaa, 0x91, 0x1a, 0x78, 0x1e, 0x1a, 0x74, 0x67, 0x27, 0x24,
	0x6c, 0xa1, 0xc2, 0xb7, 0x85, 0xa5, 0xbe, 0x41, 0x80, 0x8b, 0x18, 0xa1, 0x4f, 0xbd, 0x90, 0xe0,
	0x35, 0x10, 0x0d, 0x59, 0x40, 0x9d, 0xea, 0x8a, 0xb4, 0xfe, 0xb7, 0x26, 0xba, 0xc5, 0xe3, 0x7a,
	0x70, 0xb8, 0xdf, 0x16, 0x01, 0x86, 0xf8, 0xe2, 0x0b, 0x20, 0x31, 0xca, 0x4c, 0x77, 0xcb, 0xa2,
	0x91, 0x27, 0x8e, 0xe9, 0xcd, 0x1c, 0xee, 0xb7, 0x8b, 0xdb, 0x06, 0x70, 0x63, 0x23, 0x59, 0xe7,
	0x4c, 0xab, 0x93, 0x99, 0xd6, 0x46, 0x98, 0x2e, 0xc3, 0xcc, 0x4d, 0x92, 0xf2, 0xcc, 0x4a, 0xc5,
	0x50, 0x8b, 0x22, 0xc7, 0xe6, 0x95, 0xb6, 0x0c, 0xbe, 0x56, 0xbf, 0x22, 0xc0, 0x1b, 0x01, 0x31,
	0x19, 0x19, 0x09, 0x9d, 0x83, 0x3a, 0x73, 0x98, 0x4b, 0x44, 0x6c, 0x6a, 0x24, 0x67, 0x99, 0x16,
	0x73, 0x76, 0x09, 0xa7, 0xdb, 0x34, 0x84, 0x85, 0x3b, 0x20, 0xd9, 0x24, 0xb4, 0x02, 0xc7, 0x4f,
	0xa6, 0xcf, 0xf9, 0xb5, 0x8c, 0xe2, 0x16, 0xbe, 0x0a, 0xcd, 0x90, 0x99, 0x01, 0xdb, 0x32, 0x53,
	0x9e, 0xd2, 0xba, 0xac, 0xa5, 0xf3, 0xd7, 0xb2, 0xa9, 0x6a, 0xf7, 0xb2, 0xf9, 0xf7, 0x6a, 0x2f,
	0xbf, 0xb5, 0x91, 0x31, 0xc5, 0x33, 0xba, 0x0c, 0x5f, 0x86, 0x06, 0xf1, 0xec, 0x24, 0xb5, 0x7e,
	0xc2, 0xd4, 0x3a, 0xf1, 0xec, 0x2e, 0x53, 0x7f, 0x20, 0xc0, 0x9b, 0xbe, 0x3d, 0x5e, 0xdc, 0x84,
	0x3e, 0xe4, 0x05, 0x57, 0x26, 0x17, 0x5c, 0x3d, 0xae, 0xe0, 0xda, 0xf1, 0x05, 0xd7, 0xcf, 0x5e,
	0x70, 0xe3, 0x74, 0x05, 0xaf, 0x00, 0xbe, 0x4e, 0x5c, 0xf2, 0xe7, 0x7a, 0xd5, 0xd7, 0x55, 0xa8,
	0xf3, 0x20, 0xfc, 0x0f, 0x54, 0x84, 0xaf, 0x66, 0x54, 0x1c, 0xfb, 0x28, 0xba, 0x32, 0xa9, 0x3b,
	0xd5, 0xc9, 0xdd, 0xa9, 0x1d, 0xd7, 0x9d, 0x7a, 0xb9, 0x3b, 0xcb, 0x30, 0x65, 0x25, 0x97, 0x8e,
	0x06, 0xa2, 0x42, 0x49, 0xe3, 0x8f, 0x56, 0xdb, 0x0c, 0x49, 0x60, 0x64, 0xbe, 0x91, 0x26, 0x4e,
	0x9d, 0xbd, 0x89, 0xcd, 0x53, 0x35, 0x11, 0x5f, 0x03, 0xe0, 0x04, 0x08, 0x4f, 0x6e, 0x9d, 0x30,
	0xb9, 0x25, 0x72, 0x52, 0x80, 0x88, 0xdf, 0x3a, 0x0e, 0x00, 0x27, 0x05, 0x10, 0x39, 0x5d, 0xb6,
	0xfe, 0xbe, 0x0a, 0xd3, 0x7c, 0x38, 0x77, 0x53, 0x49, 0xc3, 0x0f, 0x00, 0x72, 0xd5, 0xc1, 0x8b,
	0x99, 0xba, 0x94, 0xd4, 0x4c, 0x96, 0x27, 0xb9, 0x52, 0x91, 0x52, 0xf1, 0x8b, 0xcf, 0xdf, 0x5f,
	0x55, 0xa6, 0x31, 0xe8, 0xbb, 0x6b, 0x42, 0xcd, 0xf1, 0x6d, 0x68, 0x66, 0x2a, 0x81, 0xff, 0xcf,
	0x72, 0xc7, 0x74, 0x43, 0x1e, 0x55, 0x33, 0x75, 0x91, 0xe3, 0xfc, 0x8b, 0x67, 0x73, 0x1c, 0xfd,
	0x69, 0x72, 0x4d, 0x9e, 0xe1, 0x3b, 0x20, 0x15, 0xc4, 0x04, 0x1f, 0xb1, 0x29, 0x2b, 0xcc, 0x38,
	0xe8, 0x7f, 0x1c, 0x74, 0x46, 0x2d, 0x90, 0xbb, 0x82, 0x56, 0xf1, 0x7d, 0x90, 0x0a, 0x0f, 0x38,
	0x07, 0x2c, 0xbf, 0xea, 0x71, 0xc0, 0x25, 0x0e, 0x38, 0x2f, 0x97, 0x59, 0x26, 0xb8, 0x8f, 0x40,
	0x2a, 0x3c, 0x94, 0x1c, 0xb7, 0xfc, 0x7a, 0xe4, 0xf9, 0xd2, 0xe4, 0x6e, 0x24, 0x7f, 0xb1, 0xac,
	0x0d, 0xab, 0xe5, 0x03, 0x7a, 0x97, 0xbe, 0x0c, 0x95, 0xbf, 0x0e, 0x86, 0x0a, 0xfa, 0x39, 0x54,
	0xd0, 0xaf, 0xa1, 0x82, 0x9e, 0xc7, 0x0a, 0x7a, 0x1b, 0x2b, 0xe8, 0x5d, 0xac, 0xa0, 0x0f, 0xb1,
	0x82, 0x3e, 0xc6, 0x0a, 0xfa, 0x14, 0x2b, 0xe8, 0x20, 0x56, 0xd0, 0x43, 0xf1, 0x47, 0xd8, 0x6e,
	0xf0, 0x03, 0x2e, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xea, 0x2a, 0x79, 0xe9, 0x80, 0x07, 0x00,
	0x00,
}

func (this *ListCyclesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListCyclesRequest)
	if !ok {
		that2, ok := that.(ListCyclesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListCyclesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListCyclesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListCyclesRequest but is not nil && this == nil")
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if this.Offset != that1.Offset {
		return fmt.Errorf("Offset this(%v) Not Equal that(%v)", this.Offset, that1.Offset)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListCyclesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCyclesRequest)
	if !ok {
		that2, ok := that.(ListCyclesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListCyclesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListCyclesResponse)
	if !ok {
		that2, ok := that.(ListCyclesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListCyclesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListCyclesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListCyclesResponse but is not nil && this == nil")
	}
	if len(this.Cycles) != len(that1.Cycles) {
		return fmt.Errorf("Cycles this(%v) Not Equal that(%v)", len(this.Cycles), len(that1.Cycles))
	}
	for i := range this.Cycles {
		if !this.Cycles[i].Equal(that1.Cycles[i]) {
			return fmt.Errorf("Cycles this[%v](%v) Not Equal that[%v](%v)", i, this.Cycles[i], i, that1.Cycles[i])
		}
	}
	if this.TotalCount != that1.TotalCount {
		return fmt.Errorf("TotalCount this(%v) Not Equal that(%v)", this.TotalCount, that1.TotalCount)
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if this.Offset != that1.Offset {
		return fmt.Errorf("Offset this(%v) Not Equal that(%v)", this.Offset, that1.Offset)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListCyclesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListCyclesResponse)
	if !ok {
		that2, ok := that.(ListCyclesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Cycles) != len(that1.Cycles) {
		return false
	}
	for i := range this.Cycles {
		if !this.Cycles[i].Equal(that1.Cycles[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetCycleRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetCycleRequest)
	if !ok {
		that2, ok := that.(GetCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetCycleRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetCycleRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetCycleRequest but is not nil && this == nil")
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetCycleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetCycleRequest)
	if !ok {
		that2, ok := that.(GetCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateCycleRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateCycleRequest)
	if !ok {
		that2, ok := that.(CreateCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateCycleRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateCycleRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateCycleRequest but is not nil && this == nil")
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Active != that1.Active {
		return fmt.Errorf("Active this(%v) Not Equal that(%v)", this.Active, that1.Active)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return fmt.Errorf("this.StartAt != nil && that1.StartAt == nil")
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return fmt.Errorf("StartAt this(%v) Not Equal that(%v)", this.StartAt, that1.StartAt)
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return fmt.Errorf("this.EndAt != nil && that1.EndAt == nil")
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return fmt.Errorf("EndAt this(%v) Not Equal that(%v)", this.EndAt, that1.EndAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CreateCycleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateCycleRequest)
	if !ok {
		that2, ok := that.(CreateCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return false
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return false
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return false
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateCycleRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateCycleRequest)
	if !ok {
		that2, ok := that.(UpdateCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateCycleRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateCycleRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateCycleRequest but is not nil && this == nil")
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Active != that1.Active {
		return fmt.Errorf("Active this(%v) Not Equal that(%v)", this.Active, that1.Active)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return fmt.Errorf("this.StartAt != nil && that1.StartAt == nil")
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return fmt.Errorf("StartAt this(%v) Not Equal that(%v)", this.StartAt, that1.StartAt)
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return fmt.Errorf("this.EndAt != nil && that1.EndAt == nil")
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return fmt.Errorf("EndAt this(%v) Not Equal that(%v)", this.EndAt, that1.EndAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateCycleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateCycleRequest)
	if !ok {
		that2, ok := that.(UpdateCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return false
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return false
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return false
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteCycleRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteCycleRequest)
	if !ok {
		that2, ok := that.(DeleteCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteCycleRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteCycleRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteCycleRequest but is not nil && this == nil")
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteCycleRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteCycleRequest)
	if !ok {
		that2, ok := that.(DeleteCycleRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Cycle) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Cycle)
	if !ok {
		that2, ok := that.(Cycle)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Cycle")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Cycle but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Cycle but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Active != that1.Active {
		return fmt.Errorf("Active this(%v) Not Equal that(%v)", this.Active, that1.Active)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if !this.Creator.Equal(that1.Creator) {
		return fmt.Errorf("Creator this(%v) Not Equal that(%v)", this.Creator, that1.Creator)
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return fmt.Errorf("this.StartAt != nil && that1.StartAt == nil")
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return fmt.Errorf("StartAt this(%v) Not Equal that(%v)", this.StartAt, that1.StartAt)
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return fmt.Errorf("this.EndAt != nil && that1.EndAt == nil")
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return fmt.Errorf("EndAt this(%v) Not Equal that(%v)", this.EndAt, that1.EndAt)
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return fmt.Errorf("this.CreatedAt != nil && that1.CreatedAt == nil")
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return fmt.Errorf("this.UpdatedAt != nil && that1.UpdatedAt == nil")
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Cycle) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Cycle)
	if !ok {
		that2, ok := that.(Cycle)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Active != that1.Active {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if !this.Creator.Equal(that1.Creator) {
		return false
	}
	if that1.StartAt == nil {
		if this.StartAt != nil {
			return false
		}
	} else if !this.StartAt.Equal(*that1.StartAt) {
		return false
	}
	if that1.EndAt == nil {
		if this.EndAt != nil {
			return false
		}
	} else if !this.EndAt.Equal(*that1.EndAt) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListCyclesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&cycles.ListCyclesRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListCyclesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&cycles.ListCyclesResponse{")
	if this.Cycles != nil {
		s = append(s, "Cycles: "+fmt.Sprintf("%#v", this.Cycles)+",\n")
	}
	s = append(s, "TotalCount: "+fmt.Sprintf("%#v", this.TotalCount)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetCycleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cycles.GetCycleRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateCycleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&cycles.CreateCycleRequest{")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "StartAt: "+fmt.Sprintf("%#v", this.StartAt)+",\n")
	s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateCycleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 10)
	s = append(s, "&cycles.UpdateCycleRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "StartAt: "+fmt.Sprintf("%#v", this.StartAt)+",\n")
	s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteCycleRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&cycles.DeleteCycleRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Cycle) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&cycles.Cycle{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Active: "+fmt.Sprintf("%#v", this.Active)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	if this.Creator != nil {
		s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	}
	s = append(s, "StartAt: "+fmt.Sprintf("%#v", this.StartAt)+",\n")
	s = append(s, "EndAt: "+fmt.Sprintf("%#v", this.EndAt)+",\n")
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringCycles(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CycleServiceClient is the client API for CycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CycleServiceClient interface {
	// List Cycles
	ListCycles(ctx context.Context, in *ListCyclesRequest, opts ...grpc.CallOption) (*ListCyclesResponse, error)
	// Get Cycle
	GetCycle(ctx context.Context, in *GetCycleRequest, opts ...grpc.CallOption) (*Cycle, error)
	// Create Cycle object request
	CreateCycle(ctx context.Context, in *CreateCycleRequest, opts ...grpc.CallOption) (*Cycle, error)
	// Update Cycle object request
	UpdateCycle(ctx context.Context, in *UpdateCycleRequest, opts ...grpc.CallOption) (*Cycle, error)
	// Delete Cycle object request
	DeleteCycle(ctx context.Context, in *DeleteCycleRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type cycleServiceClient struct {
	cc *grpc.ClientConn
}

func NewCycleServiceClient(cc *grpc.ClientConn) CycleServiceClient {
	return &cycleServiceClient{cc}
}

func (c *cycleServiceClient) ListCycles(ctx context.Context, in *ListCyclesRequest, opts ...grpc.CallOption) (*ListCyclesResponse, error) {
	out := new(ListCyclesResponse)
	err := c.cc.Invoke(ctx, "/cycles.CycleService/ListCycles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cycleServiceClient) GetCycle(ctx context.Context, in *GetCycleRequest, opts ...grpc.CallOption) (*Cycle, error) {
	out := new(Cycle)
	err := c.cc.Invoke(ctx, "/cycles.CycleService/GetCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cycleServiceClient) CreateCycle(ctx context.Context, in *CreateCycleRequest, opts ...grpc.CallOption) (*Cycle, error) {
	out := new(Cycle)
	err := c.cc.Invoke(ctx, "/cycles.CycleService/CreateCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cycleServiceClient) UpdateCycle(ctx context.Context, in *UpdateCycleRequest, opts ...grpc.CallOption) (*Cycle, error) {
	out := new(Cycle)
	err := c.cc.Invoke(ctx, "/cycles.CycleService/UpdateCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cycleServiceClient) DeleteCycle(ctx context.Context, in *DeleteCycleRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/cycles.CycleService/DeleteCycle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CycleServiceServer is the server API for CycleService service.
type CycleServiceServer interface {
	// List Cycles
	ListCycles(context.Context, *ListCyclesRequest) (*ListCyclesResponse, error)
	// Get Cycle
	GetCycle(context.Context, *GetCycleRequest) (*Cycle, error)
	// Create Cycle object request
	CreateCycle(context.Context, *CreateCycleRequest) (*Cycle, error)
	// Update Cycle object request
	UpdateCycle(context.Context, *UpdateCycleRequest) (*Cycle, error)
	// Delete Cycle object request
	DeleteCycle(context.Context, *DeleteCycleRequest) (*types.Empty, error)
}

// UnimplementedCycleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCycleServiceServer struct {
}

func (*UnimplementedCycleServiceServer) ListCycles(ctx context.Context, req *ListCyclesRequest) (*ListCyclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCycles not implemented")
}
func (*UnimplementedCycleServiceServer) GetCycle(ctx context.Context, req *GetCycleRequest) (*Cycle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCycle not implemented")
}
func (*UnimplementedCycleServiceServer) CreateCycle(ctx context.Context, req *CreateCycleRequest) (*Cycle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCycle not implemented")
}
func (*UnimplementedCycleServiceServer) UpdateCycle(ctx context.Context, req *UpdateCycleRequest) (*Cycle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCycle not implemented")
}
func (*UnimplementedCycleServiceServer) DeleteCycle(ctx context.Context, req *DeleteCycleRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCycle not implemented")
}

func RegisterCycleServiceServer(s *grpc.Server, srv CycleServiceServer) {
	s.RegisterService(&_CycleService_serviceDesc, srv)
}

func _CycleService_ListCycles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCyclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).ListCycles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cycles.CycleService/ListCycles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).ListCycles(ctx, req.(*ListCyclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CycleService_GetCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).GetCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cycles.CycleService/GetCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).GetCycle(ctx, req.(*GetCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CycleService_CreateCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).CreateCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cycles.CycleService/CreateCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).CreateCycle(ctx, req.(*CreateCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CycleService_UpdateCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).UpdateCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cycles.CycleService/UpdateCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).UpdateCycle(ctx, req.(*UpdateCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CycleService_DeleteCycle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCycleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).DeleteCycle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cycles.CycleService/DeleteCycle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).DeleteCycle(ctx, req.(*DeleteCycleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CycleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cycles.CycleService",
	HandlerType: (*CycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListCycles",
			Handler:    _CycleService_ListCycles_Handler,
		},
		{
			MethodName: "GetCycle",
			Handler:    _CycleService_GetCycle_Handler,
		},
		{
			MethodName: "CreateCycle",
			Handler:    _CycleService_CreateCycle_Handler,
		},
		{
			MethodName: "UpdateCycle",
			Handler:    _CycleService_UpdateCycle_Handler,
		},
		{
			MethodName: "DeleteCycle",
			Handler:    _CycleService_DeleteCycle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/cycles/proto/cycles.proto",
}

func (m *ListCyclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCyclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCyclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCyclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCyclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCyclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalCount != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Cycles) > 0 {
		for iNdEx := len(m.Cycles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cycles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCycles(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintCycles(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x2a
	}
	if m.StartAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintCycles(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.EndAt != nil {
		n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintCycles(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x32
	}
	if m.StartAt != nil {
		n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintCycles(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteCycleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteCycleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteCycleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cycle) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cycle) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cycle) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n5, err5 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err5 != nil {
			return 0, err5
		}
		i -= n5
		i = encodeVarintCycles(dAtA, i, uint64(n5))
		i--
		dAtA[i] = 0x52
	}
	if m.CreatedAt != nil {
		n6, err6 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err6 != nil {
			return 0, err6
		}
		i -= n6
		i = encodeVarintCycles(dAtA, i, uint64(n6))
		i--
		dAtA[i] = 0x4a
	}
	if m.EndAt != nil {
		n7, err7 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.EndAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt):])
		if err7 != nil {
			return 0, err7
		}
		i -= n7
		i = encodeVarintCycles(dAtA, i, uint64(n7))
		i--
		dAtA[i] = 0x42
	}
	if m.StartAt != nil {
		n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.StartAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintCycles(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x3a
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCycles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintCycles(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCycles(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCycles(dAtA []byte, offset int, v uint64) int {
	offset -= sovCycles(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedListCyclesRequest(r randyCycles, easy bool) *ListCyclesRequest {
	this := &ListCyclesRequest{}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 3)
	}
	return this
}

func NewPopulatedListCyclesResponse(r randyCycles, easy bool) *ListCyclesResponse {
	this := &ListCyclesResponse{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Cycles = make([]*Cycle, v1)
		for i := 0; i < v1; i++ {
			this.Cycles[i] = NewPopulatedCycle(r, easy)
		}
	}
	this.TotalCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TotalCount *= -1
	}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 5)
	}
	return this
}

func NewPopulatedGetCycleRequest(r randyCycles, easy bool) *GetCycleRequest {
	this := &GetCycleRequest{}
	this.Uuid = string(randStringCycles(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 2)
	}
	return this
}

func NewPopulatedCreateCycleRequest(r randyCycles, easy bool) *CreateCycleRequest {
	this := &CreateCycleRequest{}
	this.Title = string(randStringCycles(r))
	this.Active = bool(bool(r.Intn(2) == 0))
	this.Description = string(randStringCycles(r))
	if r.Intn(5) != 0 {
		this.StartAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 6)
	}
	return this
}

func NewPopulatedUpdateCycleRequest(r randyCycles, easy bool) *UpdateCycleRequest {
	this := &UpdateCycleRequest{}
	this.Uuid = string(randStringCycles(r))
	this.Title = string(randStringCycles(r))
	this.Active = bool(bool(r.Intn(2) == 0))
	this.Description = string(randStringCycles(r))
	if r.Intn(5) != 0 {
		this.StartAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 7)
	}
	return this
}

func NewPopulatedDeleteCycleRequest(r randyCycles, easy bool) *DeleteCycleRequest {
	this := &DeleteCycleRequest{}
	this.Uuid = string(randStringCycles(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 2)
	}
	return this
}

func NewPopulatedCycle(r randyCycles, easy bool) *Cycle {
	this := &Cycle{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Uuid = string(randStringCycles(r))
	this.Title = string(randStringCycles(r))
	this.Active = bool(bool(r.Intn(2) == 0))
	this.Description = string(randStringCycles(r))
	if r.Intn(5) != 0 {
		this.Creator = proto1.NewPopulatedUser(r, easy)
	}
	if r.Intn(5) != 0 {
		this.StartAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.EndAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCycles(r, 11)
	}
	return this
}

type randyCycles interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCycles(r randyCycles) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCycles(r randyCycles) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneCycles(r)
	}
	return string(tmps)
}
func randUnrecognizedCycles(r randyCycles, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCycles(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCycles(dAtA []byte, r randyCycles, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCycles(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCycles(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ListCyclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovCycles(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCycles(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListCyclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cycles) > 0 {
		for _, e := range m.Cycles {
			l = e.Size()
			n += 1 + l + sovCycles(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovCycles(uint64(m.TotalCount))
	}
	if m.Limit != 0 {
		n += 1 + sovCycles(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovCycles(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.StartAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.EndAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.StartAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.EndAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteCycleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Cycle) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCycles(uint64(m.Id))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.Active {
		n += 2
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.StartAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.StartAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.EndAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.EndAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovCycles(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCycles(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCycles(x uint64) (n int) {
	return sovCycles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListCyclesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListCyclesRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListCyclesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForCycles := "[]*Cycle{"
	for _, f := range this.Cycles {
		repeatedStringForCycles += strings.Replace(f.String(), "Cycle", "Cycle", 1) + ","
	}
	repeatedStringForCycles += "}"
	s := strings.Join([]string{`&ListCyclesResponse{`,
		`Cycles:` + repeatedStringForCycles + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetCycleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetCycleRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateCycleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateCycleRequest{`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`StartAt:` + strings.Replace(fmt.Sprintf("%v", this.StartAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateCycleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateCycleRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`StartAt:` + strings.Replace(fmt.Sprintf("%v", this.StartAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteCycleRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteCycleRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Cycle) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Cycle{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Active:` + fmt.Sprintf("%v", this.Active) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Creator:` + strings.Replace(fmt.Sprintf("%v", this.Creator), "User", "proto1.User", 1) + `,`,
		`StartAt:` + strings.Replace(fmt.Sprintf("%v", this.StartAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`EndAt:` + strings.Replace(fmt.Sprintf("%v", this.EndAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCycles(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListCyclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCyclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCyclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCyclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCyclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCyclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cycles = append(m.Cycles, &Cycle{})
			if err := m.Cycles[len(m.Cycles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteCycleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteCycleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteCycleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cycle) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cycle: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cycle: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &proto1.User{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StartAt == nil {
				m.StartAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.StartAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndAt == nil {
				m.EndAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.EndAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCycles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCycles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCycles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCycles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCycles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCycles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCycles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCycles
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCycles
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCycles
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCycles        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCycles          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCycles = fmt.Errorf("proto: unexpected end of group")
)
