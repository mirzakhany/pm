syntax = "proto3";

package issues;

option go_package = "issues";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "services/users/proto/users.proto";

option (gogoproto.gostring_all) = true;
option (gogoproto.equal_all) = true;
option (gogoproto.verbose_equal_all) = true;
option (gogoproto.goproto_stringer_all) = false;
option (gogoproto.stringer_all) =  true;
option (gogoproto.populate_all) = true;
option (gogoproto.testgen_all) = true;
option (gogoproto.benchgen_all) = true;
option (gogoproto.marshaler_all) = true;
option (gogoproto.sizer_all) = true;
option (gogoproto.unmarshaler_all) = true;

enum IssueStatus {
    IN_BACKLOG = 0;
    IN_PROGRESS = 1;
    TEST = 2;
    DONE = 3;
    ARCHIVED = 4;
}

message ListIssuesRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListIssuesResponse {
    repeated Issue issues = 1 [(gogoproto.jsontag) = "issues"];
    int64 total_count = 2 [(gogoproto.jsontag) = "total_count"];
    int64 limit = 3 [(gogoproto.jsontag) = "limit"];
    int64 offset = 4 [(gogoproto.jsontag) = "offset"];
}

message GetIssueRequest {
    string uuid = 1;
}

message CreateIssueRequest {
    uint64 id = 1;
    string uuid = 2;
    string title = 3;
    string description = 4;
    IssueStatus status = 5;
    uint64 sprint_id = 6;
    uint64 estimate = 7;
    string assignee_uuid = 8;
    string creator_uuid = 9;
}

message UpdateIssueRequest {
    uint64 id = 1;
    string uuid = 2;
    string title = 3;
    string description = 4;
    IssueStatus status = 5;
    uint64 sprint_id = 6;
    uint64 estimate = 7;
    string assignee_uuid = 8;
    string creator_uuid = 9;
}

message DeleteIssueRequest {
    string uuid = 1;
}

message Issue {
    uint64 id = 1;
    string uuid = 2;
    string title = 3;
    string description = 4;
    IssueStatus status = 5;
    uint64 sprint_id = 6;
    uint64 estimate = 7;
    users.User assignee = 8;
    users.User creator = 9;
    google.protobuf.Timestamp created_at = 10 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated_at = 11 [(gogoproto.stdtime) = true];
}

service IssueService {

    // List Issues
    rpc ListIssues (ListIssuesRequest) returns (ListIssuesResponse) {
        option (google.api.http) = {
            get: "/v1/issues"
        };
    }
    // Get Issue
    rpc GetIssue (GetIssueRequest) returns (Issue) {
        option (google.api.http) = {
          get: "/v1/issues/{uuid}"
        };
    }

    // Create Issue object request
    rpc CreateIssue (CreateIssueRequest) returns (Issue) {
        option (google.api.http) = {
            post: "/v1/issues"
            body: "*"
        };
    }

    // Update Issue object request
    rpc UpdateIssue (UpdateIssueRequest) returns (Issue) {
        option (google.api.http) = {
            put: "/v1/issues/{uuid}"
            body: "*"
        };
    }

    // Delete Issue object request
    rpc DeleteIssue (DeleteIssueRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          delete: "/v1/issues/{uuid}"
        };
    }
}