// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: services/issues/proto/issues.proto

package issues

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/gogo/protobuf/types"
	proto1 "github.com/mirzakhany/pm/services/users/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type IssueStatus int32

const (
	IssueStatus_IN_BACKLOG  IssueStatus = 0
	IssueStatus_IN_PROGRESS IssueStatus = 1
	IssueStatus_TEST        IssueStatus = 2
	IssueStatus_DONE        IssueStatus = 3
	IssueStatus_ARCHIVED    IssueStatus = 4
)

var IssueStatus_name = map[int32]string{
	0: "IN_BACKLOG",
	1: "IN_PROGRESS",
	2: "TEST",
	3: "DONE",
	4: "ARCHIVED",
}

var IssueStatus_value = map[string]int32{
	"IN_BACKLOG":  0,
	"IN_PROGRESS": 1,
	"TEST":        2,
	"DONE":        3,
	"ARCHIVED":    4,
}

func (x IssueStatus) String() string {
	return proto.EnumName(IssueStatus_name, int32(x))
}

func (IssueStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{0}
}

type ListIssuesRequest struct {
	Limit                int64    `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset               int64    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIssuesRequest) Reset()      { *m = ListIssuesRequest{} }
func (*ListIssuesRequest) ProtoMessage() {}
func (*ListIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{0}
}
func (m *ListIssuesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIssuesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIssuesRequest.Merge(m, src)
}
func (m *ListIssuesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListIssuesRequest proto.InternalMessageInfo

func (m *ListIssuesRequest) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListIssuesRequest) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type ListIssuesResponse struct {
	Issues               []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues"`
	TotalCount           int64    `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count"`
	Limit                int64    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit"`
	Offset               int64    `protobuf:"varint,4,opt,name=offset,proto3" json:"offset"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIssuesResponse) Reset()      { *m = ListIssuesResponse{} }
func (*ListIssuesResponse) ProtoMessage() {}
func (*ListIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{1}
}
func (m *ListIssuesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListIssuesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIssuesResponse.Merge(m, src)
}
func (m *ListIssuesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListIssuesResponse proto.InternalMessageInfo

func (m *ListIssuesResponse) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *ListIssuesResponse) GetTotalCount() int64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *ListIssuesResponse) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListIssuesResponse) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

type GetIssueRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIssueRequest) Reset()      { *m = GetIssueRequest{} }
func (*GetIssueRequest) ProtoMessage() {}
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{2}
}
func (m *GetIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssueRequest.Merge(m, src)
}
func (m *GetIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssueRequest proto.InternalMessageInfo

func (m *GetIssueRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type CreateIssueRequest struct {
	Id                   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                 string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title                string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description          string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status               IssueStatus `protobuf:"varint,5,opt,name=status,proto3,enum=issues.IssueStatus" json:"status,omitempty"`
	SprintId             uint64      `protobuf:"varint,6,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	Estimate             uint64      `protobuf:"varint,7,opt,name=estimate,proto3" json:"estimate,omitempty"`
	AssigneeUuid         string      `protobuf:"bytes,8,opt,name=assignee_uuid,json=assigneeUuid,proto3" json:"assignee_uuid,omitempty"`
	CreatorUuid          string      `protobuf:"bytes,9,opt,name=creator_uuid,json=creatorUuid,proto3" json:"creator_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *CreateIssueRequest) Reset()      { *m = CreateIssueRequest{} }
func (*CreateIssueRequest) ProtoMessage() {}
func (*CreateIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{3}
}
func (m *CreateIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateIssueRequest.Merge(m, src)
}
func (m *CreateIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateIssueRequest proto.InternalMessageInfo

func (m *CreateIssueRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CreateIssueRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *CreateIssueRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *CreateIssueRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *CreateIssueRequest) GetStatus() IssueStatus {
	if m != nil {
		return m.Status
	}
	return IssueStatus_IN_BACKLOG
}

func (m *CreateIssueRequest) GetSprintId() uint64 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *CreateIssueRequest) GetEstimate() uint64 {
	if m != nil {
		return m.Estimate
	}
	return 0
}

func (m *CreateIssueRequest) GetAssigneeUuid() string {
	if m != nil {
		return m.AssigneeUuid
	}
	return ""
}

func (m *CreateIssueRequest) GetCreatorUuid() string {
	if m != nil {
		return m.CreatorUuid
	}
	return ""
}

type UpdateIssueRequest struct {
	Id                   uint64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                 string      `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title                string      `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description          string      `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status               IssueStatus `protobuf:"varint,5,opt,name=status,proto3,enum=issues.IssueStatus" json:"status,omitempty"`
	SprintId             uint64      `protobuf:"varint,6,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	Estimate             uint64      `protobuf:"varint,7,opt,name=estimate,proto3" json:"estimate,omitempty"`
	AssigneeUuid         string      `protobuf:"bytes,8,opt,name=assignee_uuid,json=assigneeUuid,proto3" json:"assignee_uuid,omitempty"`
	CreatorUuid          string      `protobuf:"bytes,9,opt,name=creator_uuid,json=creatorUuid,proto3" json:"creator_uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UpdateIssueRequest) Reset()      { *m = UpdateIssueRequest{} }
func (*UpdateIssueRequest) ProtoMessage() {}
func (*UpdateIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{4}
}
func (m *UpdateIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateIssueRequest.Merge(m, src)
}
func (m *UpdateIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateIssueRequest proto.InternalMessageInfo

func (m *UpdateIssueRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UpdateIssueRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *UpdateIssueRequest) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *UpdateIssueRequest) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *UpdateIssueRequest) GetStatus() IssueStatus {
	if m != nil {
		return m.Status
	}
	return IssueStatus_IN_BACKLOG
}

func (m *UpdateIssueRequest) GetSprintId() uint64 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *UpdateIssueRequest) GetEstimate() uint64 {
	if m != nil {
		return m.Estimate
	}
	return 0
}

func (m *UpdateIssueRequest) GetAssigneeUuid() string {
	if m != nil {
		return m.AssigneeUuid
	}
	return ""
}

func (m *UpdateIssueRequest) GetCreatorUuid() string {
	if m != nil {
		return m.CreatorUuid
	}
	return ""
}

type DeleteIssueRequest struct {
	Uuid                 string   `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteIssueRequest) Reset()      { *m = DeleteIssueRequest{} }
func (*DeleteIssueRequest) ProtoMessage() {}
func (*DeleteIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{5}
}
func (m *DeleteIssueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteIssueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteIssueRequest.Merge(m, src)
}
func (m *DeleteIssueRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteIssueRequest proto.InternalMessageInfo

func (m *DeleteIssueRequest) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

type Issue struct {
	Id                   uint64       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Uuid                 string       `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Title                string       `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description          string       `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Status               IssueStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=issues.IssueStatus" json:"status,omitempty"`
	SprintId             uint64       `protobuf:"varint,6,opt,name=sprint_id,json=sprintId,proto3" json:"sprint_id,omitempty"`
	Estimate             uint64       `protobuf:"varint,7,opt,name=estimate,proto3" json:"estimate,omitempty"`
	Assignee             *proto1.User `protobuf:"bytes,8,opt,name=assignee,proto3" json:"assignee,omitempty"`
	Creator              *proto1.User `protobuf:"bytes,9,opt,name=creator,proto3" json:"creator,omitempty"`
	CreatedAt            *time.Time   `protobuf:"bytes,10,opt,name=created_at,json=createdAt,proto3,stdtime" json:"created_at,omitempty"`
	UpdatedAt            *time.Time   `protobuf:"bytes,11,opt,name=updated_at,json=updatedAt,proto3,stdtime" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *Issue) Reset()      { *m = Issue{} }
func (*Issue) ProtoMessage() {}
func (*Issue) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e69ad2e43f70550, []int{6}
}
func (m *Issue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Issue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Issue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Issue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Issue.Merge(m, src)
}
func (m *Issue) XXX_Size() int {
	return m.Size()
}
func (m *Issue) XXX_DiscardUnknown() {
	xxx_messageInfo_Issue.DiscardUnknown(m)
}

var xxx_messageInfo_Issue proto.InternalMessageInfo

func (m *Issue) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Issue) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *Issue) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Issue) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Issue) GetStatus() IssueStatus {
	if m != nil {
		return m.Status
	}
	return IssueStatus_IN_BACKLOG
}

func (m *Issue) GetSprintId() uint64 {
	if m != nil {
		return m.SprintId
	}
	return 0
}

func (m *Issue) GetEstimate() uint64 {
	if m != nil {
		return m.Estimate
	}
	return 0
}

func (m *Issue) GetAssignee() *proto1.User {
	if m != nil {
		return m.Assignee
	}
	return nil
}

func (m *Issue) GetCreator() *proto1.User {
	if m != nil {
		return m.Creator
	}
	return nil
}

func (m *Issue) GetCreatedAt() *time.Time {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Issue) GetUpdatedAt() *time.Time {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterEnum("issues.IssueStatus", IssueStatus_name, IssueStatus_value)
	proto.RegisterType((*ListIssuesRequest)(nil), "issues.ListIssuesRequest")
	proto.RegisterType((*ListIssuesResponse)(nil), "issues.ListIssuesResponse")
	proto.RegisterType((*GetIssueRequest)(nil), "issues.GetIssueRequest")
	proto.RegisterType((*CreateIssueRequest)(nil), "issues.CreateIssueRequest")
	proto.RegisterType((*UpdateIssueRequest)(nil), "issues.UpdateIssueRequest")
	proto.RegisterType((*DeleteIssueRequest)(nil), "issues.DeleteIssueRequest")
	proto.RegisterType((*Issue)(nil), "issues.Issue")
}

func init() {
	proto.RegisterFile("services/issues/proto/issues.proto", fileDescriptor_1e69ad2e43f70550)
}

var fileDescriptor_1e69ad2e43f70550 = []byte{
	// 838 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x55, 0x41, 0x6f, 0xe3, 0x44,
	0x18, 0xdd, 0x49, 0xd2, 0x6c, 0xf2, 0x39, 0xdb, 0x64, 0x67, 0xa1, 0x64, 0xbd, 0x2b, 0x27, 0x18,
	0xad, 0x88, 0x8a, 0xb0, 0xd9, 0xc0, 0x89, 0x0b, 0x4a, 0xd2, 0xa8, 0x44, 0x94, 0xa6, 0x72, 0x9a,
	0x22, 0x21, 0xa4, 0xc8, 0x8d, 0xa7, 0x61, 0xa4, 0x24, 0x36, 0x9e, 0x71, 0x25, 0x84, 0x90, 0x10,
	0xbf, 0x00, 0x89, 0x23, 0x12, 0x67, 0x7e, 0x02, 0x17, 0x10, 0x47, 0x8e, 0x48, 0x5c, 0x38, 0x95,
	0x26, 0xe2, 0xd4, 0x13, 0x47, 0x8e, 0xc8, 0x33, 0xe3, 0xc4, 0x4d, 0x8a, 0xc4, 0x19, 0x71, 0xca,
	0x7c, 0xdf, 0xf7, 0xe6, 0xcd, 0xf3, 0xcb, 0xf8, 0x19, 0x4c, 0x46, 0xc2, 0x4b, 0x3a, 0x26, 0xcc,
	0xa6, 0x8c, 0x45, 0x84, 0xd9, 0x41, 0xe8, 0x73, 0x5f, 0x15, 0x96, 0x28, 0x70, 0x5e, 0x56, 0xfa,
	0xd3, 0x89, 0xef, 0x4f, 0xa6, 0xc4, 0x76, 0x03, 0x6a, 0xbb, 0xf3, 0xb9, 0xcf, 0x5d, 0x4e, 0xfd,
	0xb9, 0x42, 0xe9, 0x4f, 0xd4, 0x54, 0x54, 0xe7, 0xd1, 0x85, 0x4d, 0x66, 0x01, 0xff, 0x54, 0x0d,
	0x6b, 0x9b, 0x43, 0x4e, 0x67, 0x84, 0x71, 0x77, 0x16, 0x28, 0xc0, 0xeb, 0x13, 0xca, 0x3f, 0x8e,
	0xce, 0xad, 0xb1, 0x3f, 0xb3, 0x27, 0xfe, 0xc4, 0x5f, 0x23, 0xe3, 0x4a, 0x8a, 0x8a, 0x57, 0x0a,
	0x5e, 0x5f, 0xc9, 0x8e, 0x18, 0x09, 0x13, 0xd5, 0x33, 0xdf, 0x23, 0x53, 0x89, 0x30, 0x5b, 0xf0,
	0xf0, 0x88, 0x32, 0xde, 0x13, 0xd2, 0x1d, 0xf2, 0x49, 0x44, 0x18, 0xc7, 0x2f, 0xc0, 0xce, 0x94,
	0xce, 0x28, 0xaf, 0xa2, 0x3a, 0x6a, 0x64, 0x1d, 0x59, 0xe0, 0x3d, 0xc8, 0xfb, 0x17, 0x17, 0x8c,
	0xf0, 0x6a, 0x46, 0xb4, 0x55, 0x65, 0xfe, 0x88, 0x00, 0xa7, 0x39, 0x58, 0xe0, 0xcf, 0x19, 0xc1,
	0xcf, 0x41, 0x19, 0x52, 0x45, 0xf5, 0x6c, 0x43, 0x6b, 0x3e, 0xb0, 0x94, 0x5b, 0x02, 0xd7, 0x86,
	0x9b, 0xab, 0x9a, 0x02, 0x38, 0xea, 0x17, 0xbf, 0x01, 0x1a, 0xf7, 0xb9, 0x3b, 0x1d, 0x8d, 0xfd,
	0x68, 0xae, 0x8e, 0x69, 0x97, 0x6f, 0xae, 0x6a, 0xe9, 0xb6, 0x03, 0xa2, 0xe8, 0xc4, 0x6b, 0x5c,
	0x4b, 0x94, 0x66, 0x05, 0xb6, 0x78, 0x73, 0x55, 0x93, 0x8d, 0x44, 0xb4, 0xb9, 0x12, 0x9d, 0x13,
	0x08, 0x71, 0xac, 0xec, 0xac, 0x1e, 0xe0, 0x19, 0x94, 0x0f, 0x89, 0x94, 0x9f, 0x38, 0x80, 0x21,
	0x17, 0x45, 0xd4, 0x13, 0x06, 0x14, 0x1d, 0xb1, 0x36, 0xbf, 0xcd, 0x00, 0xee, 0x84, 0xc4, 0xe5,
	0xe4, 0x16, 0x74, 0x17, 0x32, 0x0a, 0x98, 0x73, 0x32, 0xd4, 0x5b, 0x6d, 0xcd, 0xac, 0xb7, 0xc6,
	0x86, 0x72, 0xca, 0xa7, 0x44, 0xc8, 0x2c, 0x3a, 0xb2, 0xc0, 0x75, 0xd0, 0x3c, 0xc2, 0xc6, 0x21,
	0x0d, 0xe2, 0x0b, 0x22, 0x04, 0x16, 0x9d, 0x74, 0x0b, 0xbf, 0x06, 0x79, 0xc6, 0x5d, 0x1e, 0xb1,
	0xea, 0x4e, 0x1d, 0x35, 0x76, 0x9b, 0x8f, 0x6e, 0x79, 0x38, 0x10, 0x23, 0x47, 0x41, 0xf0, 0x13,
	0x28, 0xb2, 0x20, 0xa4, 0x73, 0x3e, 0xa2, 0x5e, 0x35, 0x2f, 0xf4, 0x14, 0x64, 0xa3, 0xe7, 0x61,
	0x1d, 0x0a, 0x84, 0x71, 0x3a, 0x73, 0x39, 0xa9, 0xde, 0x97, 0xb3, 0xa4, 0xc6, 0xaf, 0xc0, 0x03,
	0x97, 0x31, 0x3a, 0x99, 0x13, 0x32, 0x12, 0xd2, 0x0b, 0x42, 0x49, 0x29, 0x69, 0x0e, 0xe3, 0x47,
	0x78, 0x19, 0x4a, 0xe3, 0xf8, 0xe1, 0xfd, 0x50, 0x62, 0x8a, 0x52, 0xad, 0xea, 0x0d, 0x13, 0x83,
	0x86, 0x81, 0xf7, 0xbf, 0x41, 0xff, 0x64, 0x50, 0x03, 0xf0, 0x01, 0x99, 0x92, 0x0d, 0x7f, 0xee,
	0xba, 0x6b, 0xdf, 0x64, 0x61, 0x47, 0x80, 0xfe, 0x03, 0xee, 0xbd, 0x0a, 0x85, 0xc4, 0x28, 0x61,
	0x9c, 0xd6, 0xd4, 0x2c, 0x11, 0x47, 0xd6, 0x90, 0x91, 0xd0, 0x59, 0x0d, 0xf1, 0x33, 0xb8, 0xaf,
	0xdc, 0x12, 0xe6, 0x6d, 0xe0, 0x92, 0x19, 0x7e, 0x07, 0x40, 0x2c, 0x89, 0x37, 0x72, 0x79, 0x15,
	0x04, 0x52, 0xb7, 0x64, 0x72, 0x5a, 0x49, 0x1e, 0x5a, 0xa7, 0x49, 0x72, 0xb6, 0x73, 0x5f, 0xfd,
	0x5e, 0x43, 0x4e, 0x51, 0xed, 0x69, 0xf1, 0x98, 0x20, 0x12, 0xd7, 0x54, 0x10, 0x68, 0xff, 0x96,
	0x40, 0xed, 0x69, 0xf1, 0xfd, 0x13, 0xd0, 0x52, 0x0e, 0xe1, 0x5d, 0x80, 0xde, 0xf1, 0xa8, 0xdd,
	0xea, 0xbc, 0x77, 0xd4, 0x3f, 0xac, 0xdc, 0xc3, 0x65, 0xd0, 0x7a, 0xc7, 0xa3, 0x13, 0xa7, 0x7f,
	0xe8, 0x74, 0x07, 0x83, 0x0a, 0xc2, 0x05, 0xc8, 0x9d, 0x76, 0x07, 0xa7, 0x95, 0x4c, 0xbc, 0x3a,
	0xe8, 0x1f, 0x77, 0x2b, 0x59, 0x5c, 0x82, 0x42, 0xcb, 0xe9, 0xbc, 0xdb, 0x3b, 0xeb, 0x1e, 0x54,
	0x72, 0xcd, 0x1f, 0xb2, 0x50, 0x92, 0x94, 0x32, 0xb0, 0xf1, 0x07, 0x00, 0xeb, 0x4c, 0xc5, 0x8f,
	0x93, 0x3f, 0x66, 0x2b, 0xab, 0x75, 0xfd, 0xae, 0x91, 0x8c, 0x60, 0x13, 0x7f, 0xf9, 0xeb, 0x1f,
	0x5f, 0x67, 0x4a, 0x18, 0xec, 0xcb, 0xe7, 0xea, 0x5b, 0x85, 0xdf, 0x87, 0x42, 0x12, 0x76, 0xf8,
	0xa5, 0x64, 0xef, 0x46, 0xfc, 0xe9, 0xb7, 0xb3, 0xda, 0x7c, 0x2c, 0x78, 0x1e, 0xe1, 0x87, 0x6b,
	0x1e, 0xfb, 0xb3, 0xf8, 0xe6, 0x7d, 0x8e, 0xfb, 0xa0, 0xa5, 0x32, 0x11, 0xaf, 0xd4, 0x6c, 0x07,
	0xe5, 0x26, 0xe9, 0x8b, 0x82, 0xb4, 0x6c, 0xa6, 0xc4, 0xbd, 0x8d, 0xf6, 0xf1, 0x19, 0x68, 0xa9,
	0x0c, 0x59, 0x13, 0x6e, 0x07, 0xcb, 0x26, 0xe1, 0x53, 0x41, 0xb8, 0xa7, 0x6f, 0xab, 0x8c, 0x79,
	0x3f, 0x02, 0x2d, 0xf5, 0xee, 0xad, 0x79, 0xb7, 0x5f, 0x48, 0x7d, 0x6f, 0xeb, 0x2e, 0x74, 0xe3,
	0x6f, 0x74, 0x62, 0xc3, 0xfe, 0xf6, 0x01, 0xed, 0xb7, 0x7e, 0x5b, 0x18, 0xf7, 0xae, 0x17, 0x06,
	0xfa, 0x73, 0x61, 0xa0, 0xbf, 0x16, 0x06, 0xfa, 0x62, 0x69, 0xa0, 0xef, 0x96, 0x06, 0xfa, 0x7e,
	0x69, 0xa0, 0x9f, 0x96, 0x06, 0xfa, 0x79, 0x69, 0xa0, 0x5f, 0x96, 0x06, 0xba, 0x5e, 0x1a, 0xe8,
	0x43, 0xf5, 0xbd, 0x3b, 0xcf, 0x8b, 0x03, 0xde, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x1c,
	0x13, 0x5c, 0x5e, 0x08, 0x00, 0x00,
}

func (this *ListIssuesRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListIssuesRequest)
	if !ok {
		that2, ok := that.(ListIssuesRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListIssuesRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListIssuesRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListIssuesRequest but is not nil && this == nil")
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if this.Offset != that1.Offset {
		return fmt.Errorf("Offset this(%v) Not Equal that(%v)", this.Offset, that1.Offset)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListIssuesRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListIssuesRequest)
	if !ok {
		that2, ok := that.(ListIssuesRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListIssuesResponse) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*ListIssuesResponse)
	if !ok {
		that2, ok := that.(ListIssuesResponse)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *ListIssuesResponse")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *ListIssuesResponse but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *ListIssuesResponse but is not nil && this == nil")
	}
	if len(this.Issues) != len(that1.Issues) {
		return fmt.Errorf("Issues this(%v) Not Equal that(%v)", len(this.Issues), len(that1.Issues))
	}
	for i := range this.Issues {
		if !this.Issues[i].Equal(that1.Issues[i]) {
			return fmt.Errorf("Issues this[%v](%v) Not Equal that[%v](%v)", i, this.Issues[i], i, that1.Issues[i])
		}
	}
	if this.TotalCount != that1.TotalCount {
		return fmt.Errorf("TotalCount this(%v) Not Equal that(%v)", this.TotalCount, that1.TotalCount)
	}
	if this.Limit != that1.Limit {
		return fmt.Errorf("Limit this(%v) Not Equal that(%v)", this.Limit, that1.Limit)
	}
	if this.Offset != that1.Offset {
		return fmt.Errorf("Offset this(%v) Not Equal that(%v)", this.Offset, that1.Offset)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *ListIssuesResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ListIssuesResponse)
	if !ok {
		that2, ok := that.(ListIssuesResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Issues) != len(that1.Issues) {
		return false
	}
	for i := range this.Issues {
		if !this.Issues[i].Equal(that1.Issues[i]) {
			return false
		}
	}
	if this.TotalCount != that1.TotalCount {
		return false
	}
	if this.Limit != that1.Limit {
		return false
	}
	if this.Offset != that1.Offset {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *GetIssueRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*GetIssueRequest)
	if !ok {
		that2, ok := that.(GetIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *GetIssueRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *GetIssueRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *GetIssueRequest but is not nil && this == nil")
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *GetIssueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetIssueRequest)
	if !ok {
		that2, ok := that.(GetIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *CreateIssueRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*CreateIssueRequest)
	if !ok {
		that2, ok := that.(CreateIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *CreateIssueRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *CreateIssueRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *CreateIssueRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.SprintId != that1.SprintId {
		return fmt.Errorf("SprintId this(%v) Not Equal that(%v)", this.SprintId, that1.SprintId)
	}
	if this.Estimate != that1.Estimate {
		return fmt.Errorf("Estimate this(%v) Not Equal that(%v)", this.Estimate, that1.Estimate)
	}
	if this.AssigneeUuid != that1.AssigneeUuid {
		return fmt.Errorf("AssigneeUuid this(%v) Not Equal that(%v)", this.AssigneeUuid, that1.AssigneeUuid)
	}
	if this.CreatorUuid != that1.CreatorUuid {
		return fmt.Errorf("CreatorUuid this(%v) Not Equal that(%v)", this.CreatorUuid, that1.CreatorUuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *CreateIssueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateIssueRequest)
	if !ok {
		that2, ok := that.(CreateIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SprintId != that1.SprintId {
		return false
	}
	if this.Estimate != that1.Estimate {
		return false
	}
	if this.AssigneeUuid != that1.AssigneeUuid {
		return false
	}
	if this.CreatorUuid != that1.CreatorUuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpdateIssueRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*UpdateIssueRequest)
	if !ok {
		that2, ok := that.(UpdateIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *UpdateIssueRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *UpdateIssueRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *UpdateIssueRequest but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.SprintId != that1.SprintId {
		return fmt.Errorf("SprintId this(%v) Not Equal that(%v)", this.SprintId, that1.SprintId)
	}
	if this.Estimate != that1.Estimate {
		return fmt.Errorf("Estimate this(%v) Not Equal that(%v)", this.Estimate, that1.Estimate)
	}
	if this.AssigneeUuid != that1.AssigneeUuid {
		return fmt.Errorf("AssigneeUuid this(%v) Not Equal that(%v)", this.AssigneeUuid, that1.AssigneeUuid)
	}
	if this.CreatorUuid != that1.CreatorUuid {
		return fmt.Errorf("CreatorUuid this(%v) Not Equal that(%v)", this.CreatorUuid, that1.CreatorUuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *UpdateIssueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpdateIssueRequest)
	if !ok {
		that2, ok := that.(UpdateIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SprintId != that1.SprintId {
		return false
	}
	if this.Estimate != that1.Estimate {
		return false
	}
	if this.AssigneeUuid != that1.AssigneeUuid {
		return false
	}
	if this.CreatorUuid != that1.CreatorUuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DeleteIssueRequest) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*DeleteIssueRequest)
	if !ok {
		that2, ok := that.(DeleteIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *DeleteIssueRequest")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *DeleteIssueRequest but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *DeleteIssueRequest but is not nil && this == nil")
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *DeleteIssueRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DeleteIssueRequest)
	if !ok {
		that2, ok := that.(DeleteIssueRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *Issue) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*Issue)
	if !ok {
		that2, ok := that.(Issue)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *Issue")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *Issue but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *Issue but is not nil && this == nil")
	}
	if this.Id != that1.Id {
		return fmt.Errorf("Id this(%v) Not Equal that(%v)", this.Id, that1.Id)
	}
	if this.Uuid != that1.Uuid {
		return fmt.Errorf("Uuid this(%v) Not Equal that(%v)", this.Uuid, that1.Uuid)
	}
	if this.Title != that1.Title {
		return fmt.Errorf("Title this(%v) Not Equal that(%v)", this.Title, that1.Title)
	}
	if this.Description != that1.Description {
		return fmt.Errorf("Description this(%v) Not Equal that(%v)", this.Description, that1.Description)
	}
	if this.Status != that1.Status {
		return fmt.Errorf("Status this(%v) Not Equal that(%v)", this.Status, that1.Status)
	}
	if this.SprintId != that1.SprintId {
		return fmt.Errorf("SprintId this(%v) Not Equal that(%v)", this.SprintId, that1.SprintId)
	}
	if this.Estimate != that1.Estimate {
		return fmt.Errorf("Estimate this(%v) Not Equal that(%v)", this.Estimate, that1.Estimate)
	}
	if !this.Assignee.Equal(that1.Assignee) {
		return fmt.Errorf("Assignee this(%v) Not Equal that(%v)", this.Assignee, that1.Assignee)
	}
	if !this.Creator.Equal(that1.Creator) {
		return fmt.Errorf("Creator this(%v) Not Equal that(%v)", this.Creator, that1.Creator)
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return fmt.Errorf("this.CreatedAt != nil && that1.CreatedAt == nil")
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return fmt.Errorf("CreatedAt this(%v) Not Equal that(%v)", this.CreatedAt, that1.CreatedAt)
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return fmt.Errorf("this.UpdatedAt != nil && that1.UpdatedAt == nil")
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return fmt.Errorf("UpdatedAt this(%v) Not Equal that(%v)", this.UpdatedAt, that1.UpdatedAt)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *Issue) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Issue)
	if !ok {
		that2, ok := that.(Issue)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Uuid != that1.Uuid {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.SprintId != that1.SprintId {
		return false
	}
	if this.Estimate != that1.Estimate {
		return false
	}
	if !this.Assignee.Equal(that1.Assignee) {
		return false
	}
	if !this.Creator.Equal(that1.Creator) {
		return false
	}
	if that1.CreatedAt == nil {
		if this.CreatedAt != nil {
			return false
		}
	} else if !this.CreatedAt.Equal(*that1.CreatedAt) {
		return false
	}
	if that1.UpdatedAt == nil {
		if this.UpdatedAt != nil {
			return false
		}
	} else if !this.UpdatedAt.Equal(*that1.UpdatedAt) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *ListIssuesRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&issues.ListIssuesRequest{")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *ListIssuesResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&issues.ListIssuesResponse{")
	if this.Issues != nil {
		s = append(s, "Issues: "+fmt.Sprintf("%#v", this.Issues)+",\n")
	}
	s = append(s, "TotalCount: "+fmt.Sprintf("%#v", this.TotalCount)+",\n")
	s = append(s, "Limit: "+fmt.Sprintf("%#v", this.Limit)+",\n")
	s = append(s, "Offset: "+fmt.Sprintf("%#v", this.Offset)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetIssueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&issues.GetIssueRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateIssueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&issues.CreateIssueRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SprintId: "+fmt.Sprintf("%#v", this.SprintId)+",\n")
	s = append(s, "Estimate: "+fmt.Sprintf("%#v", this.Estimate)+",\n")
	s = append(s, "AssigneeUuid: "+fmt.Sprintf("%#v", this.AssigneeUuid)+",\n")
	s = append(s, "CreatorUuid: "+fmt.Sprintf("%#v", this.CreatorUuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *UpdateIssueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 13)
	s = append(s, "&issues.UpdateIssueRequest{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SprintId: "+fmt.Sprintf("%#v", this.SprintId)+",\n")
	s = append(s, "Estimate: "+fmt.Sprintf("%#v", this.Estimate)+",\n")
	s = append(s, "AssigneeUuid: "+fmt.Sprintf("%#v", this.AssigneeUuid)+",\n")
	s = append(s, "CreatorUuid: "+fmt.Sprintf("%#v", this.CreatorUuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *DeleteIssueRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&issues.DeleteIssueRequest{")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Issue) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 15)
	s = append(s, "&issues.Issue{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Uuid: "+fmt.Sprintf("%#v", this.Uuid)+",\n")
	s = append(s, "Title: "+fmt.Sprintf("%#v", this.Title)+",\n")
	s = append(s, "Description: "+fmt.Sprintf("%#v", this.Description)+",\n")
	s = append(s, "Status: "+fmt.Sprintf("%#v", this.Status)+",\n")
	s = append(s, "SprintId: "+fmt.Sprintf("%#v", this.SprintId)+",\n")
	s = append(s, "Estimate: "+fmt.Sprintf("%#v", this.Estimate)+",\n")
	if this.Assignee != nil {
		s = append(s, "Assignee: "+fmt.Sprintf("%#v", this.Assignee)+",\n")
	}
	if this.Creator != nil {
		s = append(s, "Creator: "+fmt.Sprintf("%#v", this.Creator)+",\n")
	}
	s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	s = append(s, "UpdatedAt: "+fmt.Sprintf("%#v", this.UpdatedAt)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringIssues(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssueServiceClient is the client API for IssueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssueServiceClient interface {
	// List Issues
	ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error)
	// Get Issue
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Create Issue object request
	CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Update Issue object request
	UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*Issue, error)
	// Delete Issue object request
	DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*types.Empty, error)
}

type issueServiceClient struct {
	cc *grpc.ClientConn
}

func NewIssueServiceClient(cc *grpc.ClientConn) IssueServiceClient {
	return &issueServiceClient{cc}
}

func (c *issueServiceClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	out := new(ListIssuesResponse)
	err := c.cc.Invoke(ctx, "/issues.IssueService/ListIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/issues.IssueService/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) CreateIssue(ctx context.Context, in *CreateIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/issues.IssueService/CreateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) UpdateIssue(ctx context.Context, in *UpdateIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/issues.IssueService/UpdateIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) DeleteIssue(ctx context.Context, in *DeleteIssueRequest, opts ...grpc.CallOption) (*types.Empty, error) {
	out := new(types.Empty)
	err := c.cc.Invoke(ctx, "/issues.IssueService/DeleteIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueServiceServer is the server API for IssueService service.
type IssueServiceServer interface {
	// List Issues
	ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error)
	// Get Issue
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
	// Create Issue object request
	CreateIssue(context.Context, *CreateIssueRequest) (*Issue, error)
	// Update Issue object request
	UpdateIssue(context.Context, *UpdateIssueRequest) (*Issue, error)
	// Delete Issue object request
	DeleteIssue(context.Context, *DeleteIssueRequest) (*types.Empty, error)
}

// UnimplementedIssueServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIssueServiceServer struct {
}

func (*UnimplementedIssueServiceServer) ListIssues(ctx context.Context, req *ListIssuesRequest) (*ListIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (*UnimplementedIssueServiceServer) GetIssue(ctx context.Context, req *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}
func (*UnimplementedIssueServiceServer) CreateIssue(ctx context.Context, req *CreateIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIssue not implemented")
}
func (*UnimplementedIssueServiceServer) UpdateIssue(ctx context.Context, req *UpdateIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIssue not implemented")
}
func (*UnimplementedIssueServiceServer) DeleteIssue(ctx context.Context, req *DeleteIssueRequest) (*types.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteIssue not implemented")
}

func RegisterIssueServiceServer(s *grpc.Server, srv IssueServiceServer) {
	s.RegisterService(&_IssueService_serviceDesc, srv)
}

func _IssueService_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issues.IssueService/ListIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListIssues(ctx, req.(*ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issues.IssueService/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_CreateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).CreateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issues.IssueService/CreateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).CreateIssue(ctx, req.(*CreateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_UpdateIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).UpdateIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issues.IssueService/UpdateIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).UpdateIssue(ctx, req.(*UpdateIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_DeleteIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).DeleteIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issues.IssueService/DeleteIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).DeleteIssue(ctx, req.(*DeleteIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "issues.IssueService",
	HandlerType: (*IssueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListIssues",
			Handler:    _IssueService_ListIssues_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _IssueService_GetIssue_Handler,
		},
		{
			MethodName: "CreateIssue",
			Handler:    _IssueService_CreateIssue_Handler,
		},
		{
			MethodName: "UpdateIssue",
			Handler:    _IssueService_UpdateIssue_Handler,
		},
		{
			MethodName: "DeleteIssue",
			Handler:    _IssueService_DeleteIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/issues/proto/issues.proto",
}

func (m *ListIssuesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIssuesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIssuesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x10
	}
	if m.Limit != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListIssuesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListIssuesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListIssuesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Offset != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x20
	}
	if m.Limit != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalCount != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Issues) > 0 {
		for iNdEx := len(m.Issues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Issues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintIssues(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatorUuid) > 0 {
		i -= len(m.CreatorUuid)
		copy(dAtA[i:], m.CreatorUuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.CreatorUuid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AssigneeUuid) > 0 {
		i -= len(m.AssigneeUuid)
		copy(dAtA[i:], m.AssigneeUuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.AssigneeUuid)))
		i--
		dAtA[i] = 0x42
	}
	if m.Estimate != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Estimate))
		i--
		dAtA[i] = 0x38
	}
	if m.SprintId != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.SprintId))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpdateIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreatorUuid) > 0 {
		i -= len(m.CreatorUuid)
		copy(dAtA[i:], m.CreatorUuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.CreatorUuid)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AssigneeUuid) > 0 {
		i -= len(m.AssigneeUuid)
		copy(dAtA[i:], m.AssigneeUuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.AssigneeUuid)))
		i--
		dAtA[i] = 0x42
	}
	if m.Estimate != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Estimate))
		i--
		dAtA[i] = 0x38
	}
	if m.SprintId != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.SprintId))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeleteIssueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteIssueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteIssueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Issue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Issue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Issue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UpdatedAt != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.UpdatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintIssues(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x5a
	}
	if m.CreatedAt != nil {
		n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(*m.CreatedAt, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintIssues(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0x52
	}
	if m.Creator != nil {
		{
			size, err := m.Creator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIssues(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Assignee != nil {
		{
			size, err := m.Assignee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintIssues(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Estimate != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Estimate))
		i--
		dAtA[i] = 0x38
	}
	if m.SprintId != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.SprintId))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uuid) > 0 {
		i -= len(m.Uuid)
		copy(dAtA[i:], m.Uuid)
		i = encodeVarintIssues(dAtA, i, uint64(len(m.Uuid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintIssues(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintIssues(dAtA []byte, offset int, v uint64) int {
	offset -= sovIssues(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedListIssuesRequest(r randyIssues, easy bool) *ListIssuesRequest {
	this := &ListIssuesRequest{}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 3)
	}
	return this
}

func NewPopulatedListIssuesResponse(r randyIssues, easy bool) *ListIssuesResponse {
	this := &ListIssuesResponse{}
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.Issues = make([]*Issue, v1)
		for i := 0; i < v1; i++ {
			this.Issues[i] = NewPopulatedIssue(r, easy)
		}
	}
	this.TotalCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.TotalCount *= -1
	}
	this.Limit = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Limit *= -1
	}
	this.Offset = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Offset *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 5)
	}
	return this
}

func NewPopulatedGetIssueRequest(r randyIssues, easy bool) *GetIssueRequest {
	this := &GetIssueRequest{}
	this.Uuid = string(randStringIssues(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 2)
	}
	return this
}

func NewPopulatedCreateIssueRequest(r randyIssues, easy bool) *CreateIssueRequest {
	this := &CreateIssueRequest{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Uuid = string(randStringIssues(r))
	this.Title = string(randStringIssues(r))
	this.Description = string(randStringIssues(r))
	this.Status = IssueStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.SprintId = uint64(uint64(r.Uint32()))
	this.Estimate = uint64(uint64(r.Uint32()))
	this.AssigneeUuid = string(randStringIssues(r))
	this.CreatorUuid = string(randStringIssues(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 10)
	}
	return this
}

func NewPopulatedUpdateIssueRequest(r randyIssues, easy bool) *UpdateIssueRequest {
	this := &UpdateIssueRequest{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Uuid = string(randStringIssues(r))
	this.Title = string(randStringIssues(r))
	this.Description = string(randStringIssues(r))
	this.Status = IssueStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.SprintId = uint64(uint64(r.Uint32()))
	this.Estimate = uint64(uint64(r.Uint32()))
	this.AssigneeUuid = string(randStringIssues(r))
	this.CreatorUuid = string(randStringIssues(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 10)
	}
	return this
}

func NewPopulatedDeleteIssueRequest(r randyIssues, easy bool) *DeleteIssueRequest {
	this := &DeleteIssueRequest{}
	this.Uuid = string(randStringIssues(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 2)
	}
	return this
}

func NewPopulatedIssue(r randyIssues, easy bool) *Issue {
	this := &Issue{}
	this.Id = uint64(uint64(r.Uint32()))
	this.Uuid = string(randStringIssues(r))
	this.Title = string(randStringIssues(r))
	this.Description = string(randStringIssues(r))
	this.Status = IssueStatus([]int32{0, 1, 2, 3, 4}[r.Intn(5)])
	this.SprintId = uint64(uint64(r.Uint32()))
	this.Estimate = uint64(uint64(r.Uint32()))
	if r.Intn(5) != 0 {
		this.Assignee = proto1.NewPopulatedUser(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Creator = proto1.NewPopulatedUser(r, easy)
	}
	if r.Intn(5) != 0 {
		this.CreatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if r.Intn(5) != 0 {
		this.UpdatedAt = github_com_gogo_protobuf_types.NewPopulatedStdTime(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssues(r, 12)
	}
	return this
}

type randyIssues interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIssues(r randyIssues) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIssues(r randyIssues) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneIssues(r)
	}
	return string(tmps)
}
func randUnrecognizedIssues(r randyIssues, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIssues(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIssues(dAtA []byte, r randyIssues, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIssues(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIssues(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ListIssuesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovIssues(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovIssues(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ListIssuesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Issues) > 0 {
		for _, e := range m.Issues {
			l = e.Size()
			n += 1 + l + sovIssues(uint64(l))
		}
	}
	if m.TotalCount != 0 {
		n += 1 + sovIssues(uint64(m.TotalCount))
	}
	if m.Limit != 0 {
		n += 1 + sovIssues(uint64(m.Limit))
	}
	if m.Offset != 0 {
		n += 1 + sovIssues(uint64(m.Offset))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CreateIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIssues(uint64(m.Id))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovIssues(uint64(m.Status))
	}
	if m.SprintId != 0 {
		n += 1 + sovIssues(uint64(m.SprintId))
	}
	if m.Estimate != 0 {
		n += 1 + sovIssues(uint64(m.Estimate))
	}
	l = len(m.AssigneeUuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.CreatorUuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIssues(uint64(m.Id))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovIssues(uint64(m.Status))
	}
	if m.SprintId != 0 {
		n += 1 + sovIssues(uint64(m.SprintId))
	}
	if m.Estimate != 0 {
		n += 1 + sovIssues(uint64(m.Estimate))
	}
	l = len(m.AssigneeUuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.CreatorUuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DeleteIssueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Issue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovIssues(uint64(m.Id))
	}
	l = len(m.Uuid)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovIssues(uint64(m.Status))
	}
	if m.SprintId != 0 {
		n += 1 + sovIssues(uint64(m.SprintId))
	}
	if m.Estimate != 0 {
		n += 1 + sovIssues(uint64(m.Estimate))
	}
	if m.Assignee != nil {
		l = m.Assignee.Size()
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.Creator != nil {
		l = m.Creator.Size()
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.CreatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.CreatedAt)
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.UpdatedAt != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdTime(*m.UpdatedAt)
		n += 1 + l + sovIssues(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIssues(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozIssues(x uint64) (n int) {
	return sovIssues(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *ListIssuesRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&ListIssuesRequest{`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *ListIssuesResponse) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForIssues := "[]*Issue{"
	for _, f := range this.Issues {
		repeatedStringForIssues += strings.Replace(f.String(), "Issue", "Issue", 1) + ","
	}
	repeatedStringForIssues += "}"
	s := strings.Join([]string{`&ListIssuesResponse{`,
		`Issues:` + repeatedStringForIssues + `,`,
		`TotalCount:` + fmt.Sprintf("%v", this.TotalCount) + `,`,
		`Limit:` + fmt.Sprintf("%v", this.Limit) + `,`,
		`Offset:` + fmt.Sprintf("%v", this.Offset) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetIssueRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateIssueRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SprintId:` + fmt.Sprintf("%v", this.SprintId) + `,`,
		`Estimate:` + fmt.Sprintf("%v", this.Estimate) + `,`,
		`AssigneeUuid:` + fmt.Sprintf("%v", this.AssigneeUuid) + `,`,
		`CreatorUuid:` + fmt.Sprintf("%v", this.CreatorUuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateIssueRequest{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SprintId:` + fmt.Sprintf("%v", this.SprintId) + `,`,
		`Estimate:` + fmt.Sprintf("%v", this.Estimate) + `,`,
		`AssigneeUuid:` + fmt.Sprintf("%v", this.AssigneeUuid) + `,`,
		`CreatorUuid:` + fmt.Sprintf("%v", this.CreatorUuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *DeleteIssueRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&DeleteIssueRequest{`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Issue) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Issue{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Uuid:` + fmt.Sprintf("%v", this.Uuid) + `,`,
		`Title:` + fmt.Sprintf("%v", this.Title) + `,`,
		`Description:` + fmt.Sprintf("%v", this.Description) + `,`,
		`Status:` + fmt.Sprintf("%v", this.Status) + `,`,
		`SprintId:` + fmt.Sprintf("%v", this.SprintId) + `,`,
		`Estimate:` + fmt.Sprintf("%v", this.Estimate) + `,`,
		`Assignee:` + strings.Replace(fmt.Sprintf("%v", this.Assignee), "User", "proto1.User", 1) + `,`,
		`Creator:` + strings.Replace(fmt.Sprintf("%v", this.Creator), "User", "proto1.User", 1) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`UpdatedAt:` + strings.Replace(fmt.Sprintf("%v", this.UpdatedAt), "Timestamp", "types.Timestamp", 1) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringIssues(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *ListIssuesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIssuesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIssuesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListIssuesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListIssuesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListIssuesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issues = append(m.Issues, &Issue{})
			if err := m.Issues[len(m.Issues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IssueStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SprintId", wireType)
			}
			m.SprintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SprintId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			m.Estimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IssueStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SprintId", wireType)
			}
			m.SprintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SprintId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			m.Estimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssigneeUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssigneeUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatorUuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatorUuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteIssueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteIssueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteIssueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Issue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Issue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Issue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uuid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uuid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= IssueStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SprintId", wireType)
			}
			m.SprintId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SprintId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Estimate", wireType)
			}
			m.Estimate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Estimate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assignee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assignee == nil {
				m.Assignee = &proto1.User{}
			}
			if err := m.Assignee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Creator == nil {
				m.Creator = &proto1.User{}
			}
			if err := m.Creator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.CreatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthIssues
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthIssues
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdatedAt == nil {
				m.UpdatedAt = new(time.Time)
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(m.UpdatedAt, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipIssues(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthIssues
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipIssues(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowIssues
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowIssues
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthIssues
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupIssues
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthIssues
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthIssues        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowIssues          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupIssues = fmt.Errorf("proto: unexpected end of group")
)
