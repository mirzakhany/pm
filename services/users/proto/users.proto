syntax = "proto3";

package users;

option go_package = "users";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

// Enable custom Marshal method.
option (gogoproto.marshaler_all) = true;
// Enable custom Unmarshal method.
option (gogoproto.unmarshaler_all) = true;
// Enable custom Size method (Required by Marshal and Unmarshal).
option (gogoproto.sizer_all) = true;
// Enable registration with golang/protobuf for the grpc-gateway.
option (gogoproto.goproto_registration) = true;
// Enable generation of XXX_MessageName methods for grpc-go/status.
option (gogoproto.messagename_all) = true;


message ListUsersRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListUsersResponse {
    repeated User users = 1;
    int64 total_count = 2;
    int64 limit = 3;
    int64 offset = 4;
}

message GetUserRequest {
    string uuid = 1;
}

message CreateUserRequest {
    string username = 1;
    string password = 2;
    string email = 3;
    bool enable = 4;
}

message UpdateUserRequest {
    string uuid = 1;
    string username = 2;
    string email = 4;
    bool enable = 5;
}

message DeleteUserRequest {
    string uuid = 1;
}

message User {
    uint64 id = 1;
    string uuid = 2;
    string username = 3;
    string password = 4;
    string email = 5;
    bool enable = 6;
    google.protobuf.Timestamp created_at = 7 [(gogoproto.stdtime) = true];
    google.protobuf.Timestamp updated_at = 8 [(gogoproto.stdtime) = true];
}

message LoginRequest {
    string username = 1;
    string password = 2;
}

message LoginResponse {
    string access_token = 1;
    string refresh_token = 2;
}

message RegisterRequest {
    string username = 2;
    string password = 3;
    string email = 4;
}

message RegisterResponse {
    string uuid = 1;
    string username = 2;
    string email = 4;
}

service UserService {

    // List Users
    rpc ListUsers (ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            get: "/v1/users"
        };
    }
    // Get User
    rpc GetUser (GetUserRequest) returns (User) {
        option (google.api.http) = {
          get: "/v1/users/{uuid}"
        };
    }

    // Create User object request
    rpc CreateUser (CreateUserRequest) returns (User) {
        option (google.api.http) = {
            post: "/v1/users"
            body: "*"
        };
    }

    // Update User object request
    rpc UpdateUser (UpdateUserRequest) returns (User) {
        option (google.api.http) = {
            put: "/v1/users/{uuid}"
            body: "*"
        };
    }

    // Delete User object request
    rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          delete: "/v1/users/{uuid}"
        };
    }

    // Login login user
    rpc Login(LoginRequest) returns (LoginResponse) {
        option (google.api.http) = {
            post: "/v1/users/login"
            body: "*"
        };
    }

    // Login login user
    rpc Register(RegisterRequest) returns (RegisterResponse) {
        option (google.api.http) = {
            post: "/v1/users/login"
            body: "*"
        };
    }
}