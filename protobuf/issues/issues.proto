syntax = "proto3";

package issuesV1;

option go_package = "protobuf/issues;issues";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "protobuf/issues/model.proto";

message ListIssuesRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListIssuesResponse {
    repeated Issue issues = 1;
    int64 total_count = 2;
    int64 limit = 3;
    int64 offset = 4;
}

message GetIssueRequest {
    string uuid = 1;
}

message CreateIssueRequest {
    string title = 1;
    string description = 2;
    string status_uuid = 3;
    string cycle_uuid = 4;
    uint64 estimate = 5;
    string assignee_uuid = 6;
    string creator_uuid = 7;
}

message UpdateIssueRequest {
    string uuid = 1;
    string title = 2;
    string description = 3;
    string status_uuid = 4;
    string cycle_uuid = 5;
    uint64 estimate = 6;
    string assignee_uuid = 7;
    string creator_uuid = 8;
}

message DeleteIssueRequest {
    string uuid = 1;
}

message ListIssueStatusRequest {
    int64 limit = 1;
    int64 offset = 2;
}

message ListIssueStatusResponse {
    repeated IssueStatus issue_status = 1;
    int64 total_count = 2;
    int64 limit = 3;
    int64 offset = 4;
}

message GetIssueStatusRequest {
    string uuid = 1;
}

message CreateIssueStatusRequest {
    string title = 1;
}

message UpdateIssueStatusRequest {
    string uuid = 1;
    string title = 2;
}

message DeleteIssueStatusRequest {
    string uuid = 1;
}

message SetIssueStatusRequest {
    string uuid = 1;
    IssueStatus status = 2;
}

service IssueService {

    // List Issues
    rpc ListIssues (ListIssuesRequest) returns (ListIssuesResponse) {
        option (google.api.http) = {
            get: "/v1/issues"
        };
    }
    // Get Issue
    rpc GetIssue (GetIssueRequest) returns (Issue) {
        option (google.api.http) = {
          get: "/v1/issues/{uuid}"
        };
    }

    // Create Issue object request
    rpc CreateIssue (CreateIssueRequest) returns (Issue) {
        option (google.api.http) = {
            post: "/v1/issues"
            body: "*"
        };
    }

    // Update Issue object request
    rpc UpdateIssue (UpdateIssueRequest) returns (Issue) {
        option (google.api.http) = {
            put: "/v1/issues/{uuid}"
            body: "*"
        };
    }

    // Delete Issue object request
    rpc DeleteIssue (DeleteIssueRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          delete: "/v1/issues/{uuid}"
        };
    }

    // issue status apis

    // List Issue status
    rpc ListIssueStatus (ListIssueStatusRequest) returns (ListIssueStatusResponse) {
        option (google.api.http) = {
            get: "/v1/issues/-/status"
        };
    }

    // Get Issue status
    rpc GetIssueStatus (GetIssueStatusRequest) returns (IssueStatus) {
        option (google.api.http) = {
            get: "/v1/issues/-/status"
        };
    }

    // Create IssueStatus object request
    rpc CreateIssueStatus (CreateIssueStatusRequest) returns (IssueStatus) {
        option (google.api.http) = {
            post: "/v1/issues/-/status"
            body: "*"
        };
    }

    // Update IssueStatus object request
    rpc UpdateIssueStatus (UpdateIssueStatusRequest) returns (IssueStatus) {
        option (google.api.http) = {
            put: "/v1/issues/-/status/{uuid}"
            body: "*"
        };
    }

    // Delete IssueStatus object request
    rpc DeleteIssueStatus (DeleteIssueStatusRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
          delete: "/v1/issues/-/status/{uuid}"
        };
    }

    // Set Issue Status object request
    rpc SetIssueStatus (SetIssueStatusRequest) returns (Issue) {
        option (google.api.http) = {
          delete: "/v1/issues/status/{uuid}"
        };
    }
}